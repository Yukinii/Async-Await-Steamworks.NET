// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2015 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

using System;

namespace Steamworks
{
    //-----------------------------------------------------------------------------
    // Purpose: possible results when registering an activation code
    //-----------------------------------------------------------------------------
    public enum ERegisterActivationCodeResult
    {
        ResultOk = 0,
        ResultFail = 1,
        ResultAlreadyRegistered = 2,
        ResultTimeout = 3,
        AlreadyOwned = 4,
    }

    public enum ESteamControllerPad
    {
        Left,
        Right
    }

    public enum EControllerSource
    {
        None,
        LeftTrackpad,
        RightTrackpad,
        Joystick,
        Abxy,
        Switch,
        LeftTrigger,
        RightTrigger,
        Gyro,
        Count
    }

    public enum EControllerSourceMode
    {
        None,
        Dpad,
        Buttons,
        FourButtons,
        AbsoluteMouse,
        RelativeMouse,
        JoystickMove,
        JoystickCamera,
        ScrollWheel,
        Trigger,
        TouchMenu,
        MouseJoystick,
        MouseRegion
    }

    public enum EControllerActionOrigin
    {
        None,
        A,
        B,
        X,
        Y,
        LeftBumper,
        RightBumper,
        LeftGrip,
        RightGrip,
        Start,
        Back,
        LeftPadTouch,
        LeftPadSwipe,
        LeftPadClick,
        LeftPadDPadNorth,
        LeftPadDPadSouth,
        LeftPadDPadWest,
        LeftPadDPadEast,
        RightPadTouch,
        RightPadSwipe,
        RightPadClick,
        RightPadDPadNorth,
        RightPadDPadSouth,
        RightPadDPadWest,
        RightPadDPadEast,
        LeftTriggerPull,
        LeftTriggerClick,
        RightTriggerPull,
        RightTriggerClick,
        LeftStickMove,
        LeftStickClick,
        LeftStickDPadNorth,
        LeftStickDPadSouth,
        LeftStickDPadWest,
        LeftStickDPadEast,
        GyroMove,
        GyroPitch,
        GyroYaw,
        GyroRoll,

        Count
    }

    //-----------------------------------------------------------------------------
    // Purpose: set of relationships to other users
    //-----------------------------------------------------------------------------
    public enum EFriendRelationship
    {
        None = 0,
        Blocked = 1,            // this doesn't get stored; the user has just done an Ignore on an friendship invite
        RequestRecipient = 2,
        Friend = 3,
        RequestInitiator = 4,
        Ignored = 5,            // this is stored; the user has explicit blocked this other user from comments/chat/etc
        IgnoredFriend = 6,
        Suggested = 7,


        Max = 8,
    }

    //-----------------------------------------------------------------------------
    // Purpose: list of states a friend can be in
    //-----------------------------------------------------------------------------
    public enum EPersonaState
    {
        Offline = 0,            // friend is not currently logged on
        Online = 1,         // friend is logged on
        Busy = 2,           // user is on, but busy
        Away = 3,           // auto-away feature
        Snooze = 4,         // auto-away for a long time
        LookingToTrade = 5, // Online, trading
        LookingToPlay = 6,  // Online, wanting to play
        Max,
    }

    //-----------------------------------------------------------------------------
    // Purpose: flags for enumerating friends list, or quickly checking a the relationship between users
    //-----------------------------------------------------------------------------
    [Flags]
    public enum EFriendFlags
    {
        None = 0x00,
        Blocked = 0x01,
        FriendshipRequested = 0x02,
        Immediate = 0x04,           // "regular" friend
        ClanMember = 0x08,
        OnGameServer = 0x10,
        RequestingFriendship = 0x80,
        RequestingInfo = 0x100,
        Ignored = 0x200,
        IgnoredFriend = 0x400,
        Suggested = 0x800,
        ChatMember = 0x1000,
        All = 0xFFFF,
    }

    //-----------------------------------------------------------------------------
    // Purpose: user restriction flags
    //-----------------------------------------------------------------------------
    public enum EUserRestriction
    {
        None = 0,   // no known chat/content restriction
        Unknown = 1,    // we don't know yet (user offline)
        AnyChat = 2,    // user is not allowed to (or can't) send/recv any chat
        VoiceChat = 4,  // user is not allowed to (or can't) send/recv voice chat
        GroupChat = 8,  // user is not allowed to (or can't) send/recv group chat
        Rating = 16,    // user is too young according to rating in current region
        GameInvites = 32,   // user cannot send or recv game invites (e.g. mobile)
        Trading = 64,   // user cannot participate in trading (console, mobile)
    }

    // These values are passed as parameters to the store
    public enum EOverlayToStoreFlag
    {
        None = 0,
        AddToCart = 1,
        AddToCartAndShow = 2,
    }

    // used in PersonaStateChange::ChangeFlags to describe what's changed about a user
    // these flags describe what the client has learned has changed recently, so on startup you'll see a name, avatar & relationship change for every friend
    [Flags]
    public enum EPersonaChange
    {
        Name = 0x0001,
        Status = 0x0002,
        ComeOnline = 0x0004,
        GoneOffline = 0x0008,
        GamePlayed = 0x0010,
        GameServer = 0x0020,
        Avatar = 0x0040,
        JoinedSource = 0x0080,
        LeftSource = 0x0100,
        RelationshipChanged = 0x0200,
        NameFirstSet = 0x0400,
        FacebookInfo = 0x0800,
        Nickname = 0x1000,
        SteamLevel = 0x2000,
    }

    // list of possible return values from the ISteamGameCoordinator API
    public enum EgcResults
    {
        Ok = 0,
        NoMessage = 1,          // There is no message in the queue
        BufferTooSmall = 2,     // The buffer is too small for the requested message
        NotLoggedOn = 3,            // The client is not logged onto Steam
        InvalidMessage = 4,     // Something was wrong with the message being sent with SendMessage
    }

    public enum EhtmlMouseButton
    {
        Left = 0,
        Right = 1,
        Middle = 2,
    }

    public enum EMouseCursor
    {
        User = 0,
        None,
        Arrow,
        Ibeam,
        Hourglass,
        Waitarrow,
        Crosshair,
        Up,
        Sizenw,
        Sizese,
        Sizene,
        Sizesw,
        Sizew,
        Sizee,
        Sizen,
        Sizes,
        Sizewe,
        Sizens,
        Sizeall,
        No,
        Hand,
        Blank, // don't show any custom cursor, just use your default
        MiddlePan,
        NorthPan,
        NorthEastPan,
        EastPan,
        SouthEastPan,
        SouthPan,
        SouthWestPan,
        WestPan,
        NorthWestPan,
        Alias,
        Cell,
        Colresize,
        Copycur,
        Verticaltext,
        Rowresize,
        Zoomin,
        Zoomout,
        Help,
        Custom,

        Last, // custom cursors start from this value and up
    }

    [Flags]
    public enum EhtmlKeyModifiers
    {
        None = 0,
        AltDown = 1 << 0,
        CtrlDown = 1 << 1,
        ShiftDown = 1 << 2,
    }

    [Flags]
    public enum ESteamItemFlags
    {
        // Item status flags - these flags are permanently attached to specific item instances
        NoTrade = 1 << 0, // This item is account-locked and cannot be traded or given away.

        // Action confirmation flags - these flags are set one time only, as part of a result set
        Removed = 1 << 8,   // The item has been destroyed, traded away, expired, or otherwise invalidated
        Consumed = 1 << 9,  // The item quantity has been decreased by 1 via ConsumeItem API.

        // All other flag bits are currently reserved for internal Steam use at this time.
        // Do not assume anything about the state of other flags which are not defined here.
    }

    // lobby type description
    public enum ELobbyType
    {
        Private = 0,        // only way to join the lobby is to invite to someone else
        FriendsOnly = 1,    // shows for friends or invitees, but not in lobby list
        Public = 2,         // visible for friends and in lobby list
        Invisible = 3,      // returned by search, but not visible to other friends
                            //    useful if you want a user in two lobbies, for example matching groups together
                            //	  a user can be in only one regular lobby, and up to two invisible lobbies
    }

    // lobby search filter tools
    public enum ELobbyComparison
    {
        EqualToOrLessThan = -2,
        LessThan = -1,
        Equal = 0,
        GreaterThan = 1,
        EqualToOrGreaterThan = 2,
        NotEqual = 3,
    }

    // lobby search distance. Lobby results are sorted from closest to farthest.
    public enum ELobbyDistanceFilter
    {
        Close,      // only lobbies in the same immediate region will be returned
        Default,        // only lobbies in the same region or near by regions
        Far,            // for games that don't have many latency requirements, will return lobbies about half-way around the globe
        Worldwide,  // no filtering, will match lobbies as far as India to NY (not recommended, expect multiple seconds of latency between the clients)
    }

    //-----------------------------------------------------------------------------
    // Purpose: Used in ChatInfo messages - fields specific to a chat member - must fit in a uint32
    //-----------------------------------------------------------------------------
    [Flags]
    public enum EChatMemberStateChange
    {
        // Specific to joining / leaving the chatroom
        Entered = 0x0001,       // This user has joined or is joining the chat room
        Left = 0x0002,      // This user has left or is leaving the chat room
        Disconnected = 0x0004,      // User disconnected without leaving the chat first
        Kicked = 0x0008,        // User kicked
        Banned = 0x0010,        // User kicked and banned
    }

    //-----------------------------------------------------------------------------
    // Purpose:
    //-----------------------------------------------------------------------------
    public enum AudioPlaybackStatus
    {
        Undefined = 0,
        Playing = 1,
        Paused = 2,
        Idle = 3
    }

    // list of possible errors returned by SendP2PPacket() API
    // these will be posted in the P2PSessionConnectFail callback
    public enum Ep2PSessionError
    {
        None = 0,
        NotRunningApp = 1,          // target is not running the same game
        NoRightsToApp = 2,          // local user doesn't own the app that is running
        DestinationNotLoggedIn = 3, // target user isn't connected to Steam
        Timeout = 4,                    // target isn't responding, perhaps not calling AcceptP2PSessionWithUser()
                                        // corporate firewalls can also block this (NAT traversal is not firewall traversal)
                                        // make sure that UDP ports 3478, 4379, and 4380 are open in an outbound direction
        Max = 5
    }

    // SendP2PPacket() send types
    // Typically Unreliable is what you want for UDP-like packets, Reliable for TCP-like packets
    public enum Ep2PSend
    {
        // Basic UDP send. Packets can't be bigger than 1200 bytes (your typical MTU size). Can be lost, or arrive out of order (rare).
        // The sending API does have some knowledge of the underlying connection, so if there is no NAT-traversal accomplished or
        // there is a recognized adjustment happening on the connection, the packet will be batched until the connection is open again.
        Unreliable = 0,

        // As above, but if the underlying p2p connection isn't yet established the packet will just be thrown away. Using this on the first
        // packet sent to a remote host almost guarantees the packet will be dropped.
        // This is only really useful for kinds of data that should never buffer up, i.e. voice payload packets
        UnreliableNoDelay = 1,

        // Reliable message send. Can send up to 1MB of data in a single message.
        // Does fragmentation/re-assembly of messages under the hood, as well as a sliding window for efficient sends of large chunks of data.
        Reliable = 2,

        // As above, but applies the Nagle algorithm to the send - sends will accumulate
        // until the current MTU size (typically ~1200 bytes, but can change) or ~200ms has passed (Nagle algorithm).
        // Useful if you want to send a set of smaller messages but have the coalesced into a single packet
        // Since the reliable stream is all ordered, you can do several small message sends with ReliableWithBuffering and then
        // do a normal Reliable to force all the buffered data to be sent.
        ReliableWithBuffering = 3,

    }

    // connection progress indicators, used by CreateP2PConnectionSocket()
    public enum EsNetSocketState
    {
        Invalid = 0,

        Connected = 1,

        Initiated = 10,             // the connection state machine has started


        LocalCandidatesFound = 11,  // we've found our local IP info
        ReceivedRemoteCandidates = 12,// we've received information from the remote machine, via the Steam back-end, about their IP info

        ChallengeHandshake = 15,        // we've received a challenge packet from the server


        Disconnecting = 21,         // the API shut it down, and we're in the process of telling the other end
        LocalDisconnect = 22,           // the API shut it down, and we've completed shutdown
        TimeoutDuringConnect = 23,  // we timed out while trying to creating the connection
        RemoteEndDisconnected = 24, // the remote end has disconnected from us
        ConnectionBroken = 25,      // connection has been broken; either the other end has disappeared or our local network connection has broke

    }

    // describes how the socket is currently connected
    public enum EsNetSocketConnectionType
    {
        NotConnected = 0,
        Udp = 1,
        UdpRelay = 2,
    }

    // Ways to handle a synchronization conflict
    public enum EResolveConflict
    {
        Client = 1,     // The local version of each file will be used to overwrite the server version
        Server = 2,     // The server version of each file will be used to overwrite the local version
    }

    [Flags]
    public enum ERemoteStoragePlatform
    {
        None = 0,
        Windows = (1 << 0),
        Osx = (1 << 1),
        Ps3 = (1 << 2),
        Linux = (1 << 3),
        Reserved2 = (1 << 4),

        All = -1
    }

    public enum Visibility
    {
        Public = 0,
        FriendsOnly = 1,
        Private = 2,
    }

    public enum WorkshopFileType
    {
        First = 0,

        Community = 0,      // normal Workshop item that can be subscribed to
        Microtransaction = 1,       // Workshop item that is meant to be voted on for the purpose of selling in-game
        Collection = 2,     // a collection of Workshop or Greenlight items
        Art = 3,        // artwork
        Video = 4,      // external video
        Screenshot = 5,     // screenshot
        Game = 6,       // Greenlight game entry
        Software = 7,       // Greenlight software entry
        Concept = 8,        // Greenlight concept
        WebGuide = 9,       // Steam web guide
        IntegratedGuide = 10,       // application integrated guide
        Merch = 11,     // Workshop merchandise meant to be voted on for the purpose of being sold
        ControllerBinding = 12,     // Steam Controller bindings
        SteamworksAccessInvite = 13,        // internal
        SteamVideo = 14,        // Steam video
        GameManagedItem = 15,       // managed completely by the game, not the user, and not shown on the web

        // Update Max if you add values.
        Max = 16

    }

    public enum EWorkshopVote
    {
        Unvoted = 0,
        For = 1,
        Against = 2,
        Later = 3,
    }

    public enum EWorkshopFileAction
    {
        Played = 0,
        Completed = 1,
    }

    public enum EWorkshopEnumerationType
    {
        RankedByVote = 0,
        Recent = 1,
        Trending = 2,
        FavoritesOfFriends = 3,
        VotedByFriends = 4,
        ContentByFriends = 5,
        RecentFromFollowedUsers = 6,
    }

    public enum EWorkshopVideoProvider
    {
        None = 0,
        Youtube = 1
    }

    public enum EugcReadAction
    {
        // Keeps the file handle open unless the last byte is read.  You can use this when reading large files (over 100MB) in sequential chunks.
        // If the last byte is read, this will behave the same as Close.  Otherwise, it behaves the same as ContinueReading.
        // This value maintains the same behavior as before the EugcReadAction parameter was introduced.
        ContinueReadingUntilFinished = 0,

        // Keeps the file handle open.  Use this when using UGCRead to seek to different parts of the file.
        // When you are done seeking around the file, make a final call with Close to close it.
        ContinueReading = 1,

        // Frees the file handle.  Use this when you're done reading the content.
        // To read the file from Steam again you will need to call UGCDownload again.
        Close = 2,
    }

    // Matching UGC types for queries
    public enum MatchingUGCType
    {
        Items = 0,      // both mtx items and ready-to-use items
        ItemsMtx = 1,
        ItemsReadyToUse = 2,
        Collections = 3,
        Artwork = 4,
        Videos = 5,
        Screenshots = 6,
        AllGuides = 7,      // both web guides and integrated guides
        WebGuides = 8,
        IntegratedGuides = 9,
        UsableInGame = 10,      // ready-to-use items and integrated guides
        ControllerBindings = 11,
        GameManagedItems = 12,      // game managed items (not managed by users)
        All = ~0,       // return everything
    }

    // Different lists of published UGC for a user.
    // If the current logged in user is different than the specified user, then some options may not be allowed.
    public enum UserUGCList
    {
        Published,
        VotedOn,
        VotedUp,
        VotedDown,
        WillVoteLater,
        Favorited,
        Subscribed,
        UsedOrPlayed,
        Followed,
    }

    // Sort order for user published UGC lists (defaults to creation order descending)
    public enum UGCListSortOrder
    {
        CreationOrderDesc,
        CreationOrderAsc,
        TitleAsc,
        LastUpdatedDesc,
        SubscriptionDateDesc,
        VoteScoreDesc,
        ForModeration,
    }

    // Combination of sorting and filtering for queries across all UGC
    public enum UGCQuery
    {
        RankedByVote = 0,
        RankedByPublicationDate = 1,
        AcceptedForGameRankedByAcceptanceDate = 2,
        RankedByTrend = 3,
        FavoritedByFriendsRankedByPublicationDate = 4,
        CreatedByFriendsRankedByPublicationDate = 5,
        RankedByNumTimesReported = 6,
        CreatedByFollowedUsersRankedByPublicationDate = 7,
        NotYetRated = 8,
        RankedByTotalVotesAsc = 9,
        RankedByVotesUp = 10,
        RankedByTextSearch = 11,
        RankedByTotalUniqueSubscriptions = 12,
    }

    public enum EItemUpdateStatus
    {
        Invalid = 0, // The item update handle was invalid, job might be finished, listen too SubmitItemUpdateResult
        PreparingConfig = 1, // The item update is processing configuration data
        PreparingContent = 2, // The item update is reading and processing content files
        UploadingContent = 3, // The item update is uploading content changes to Steam
        UploadingPreviewFile = 4, // The item update is uploading new preview file image
        CommittingChanges = 5  // The item update is committing all changes
    }

    [Flags]
    public enum ItemState
    {
        None = 0,   // item not tracked on client
        Subscribed = 1, // current user is subscribed to this item. Not just cached.
        LegacyItem = 2, // item was created with ISteamRemoteStorage
        Installed = 4,  // item is installed and usable (but maybe out of date)
        NeedsUpdate = 8,    // items needs an update. Either because it's not installed yet or creator updated content
        Downloading = 16,   // item update is currently downloading
        DownloadPending = 32,   // DownloadItem() was called for this item, content isn't available until DownloadItemResult is fired
    }

    public enum EItemStatistic
    {
        NumSubscriptions = 0,
        NumFavorites = 1,
        NumFollowers = 2,
        NumUniqueSubscriptions = 3,
        NumUniqueFavorites = 4,
        NumUniqueFollowers = 5,
        NumUniqueWebsiteViews = 6,
        ReportScore = 7,
    }

    public enum EFailureType
    {
        FlushedCallbackQueue,
        PipeFail,
    }

    // type of data request, when downloading leaderboard entries
    public enum ELeaderboardDataRequest
    {
        Global = 0,
        GlobalAroundUser = 1,
        Friends = 2,
        Users = 3
    }

    // the sort order of a leaderboard
    public enum ELeaderboardSortMethod
    {
        None = 0,
        Ascending = 1,  // top-score is lowest number
        Descending = 2, // top-score is highest number
    }

    // the display type (used by the Steam Community web site) for a leaderboard
    public enum ELeaderboardDisplayType
    {
        None = 0,
        Numeric = 1,            // simple numerical score
        TimeSeconds = 2,        // the score represents a time, in seconds
        TimeMilliSeconds = 3,   // the score represents a time, in milliseconds
    }

    public enum ELeaderboardUploadScoreMethod
    {
        None = 0,
        KeepBest = 1,   // Leaderboard will keep user's best score
        ForceUpdate = 2,    // Leaderboard will always replace score with specified
    }

    // Steam API call failure results
    public enum ESteamApiCallFailure
    {
        None = -1,          // no failure
        SteamGone = 0,      // the local Steam process has gone away
        NetworkFailure = 1, // the network connection to Steam has been broken, or was already broken
        InvalidHandle = 2,  // the SteamAPICall handle passed in no longer exists
        MismatchedCallback = 3,// GetAPICallResult() was called with the wrong callback type for this API call
    }

    // Input modes for the Big Picture gamepad text entry
    public enum EGamepadTextInputMode
    {
        Normal = 0,
        Password = 1
    }

    // Controls number of allowed lines for the Big Picture gamepad text entry
    public enum EGamepadTextInputLineMode
    {
        SingleLine = 0,
        MultipleLines = 1
    }

    //-----------------------------------------------------------------------------
    // results for CheckFileSignature
    //-----------------------------------------------------------------------------
    public enum ECheckFileSignature
    {
        InvalidSignature = 0,
        ValidSignature = 1,
        FileNotFound = 2,
        NoSignaturesFoundForThisApp = 3,
        NoSignaturesFoundForThisFile = 4,
    }

    public enum EMatchMakingServerResponse
    {
        ServerResponded = 0,
        ServerFailedToRespond,
        NoServersListedOnMasterServer // for the Internet query type, returned in response callback if no servers of this type match
    }

    public enum EServerMode
    {
        ServerModeInvalid = 0, // DO NOT USE
        ServerModeNoAuthentication = 1, // Don't authenticate user logins and don't list on the server list
        ServerModeAuthentication = 2, // Authenticate users, list on the server list, don't run VAC on clients that connect
        ServerModeAuthenticationAndSecure = 3, // Authenticate users, list on the server list and VAC protect clients
    }

    // General result codes
    public enum ResultType
    {
        Ok = 1,                         // success
        Fail = 2,                           // generic failure
        NoConnection = 3,                   // no/failed network connection
                                            //	NoConnectionRetry = 4,				// OBSOLETE - removed
        InvalidPassword = 5,                // password/ticket is invalid
        LoggedInElsewhere = 6,              // same user logged in elsewhere
        InvalidProtocolVer = 7,         // protocol version is incorrect
        InvalidParam = 8,                   // a parameter is incorrect
        FileNotFound = 9,                   // file was not found
        Busy = 10,                          // called method busy - action not taken
        InvalidState = 11,                  // called object was in an invalid state
        InvalidName = 12,                   // name is invalid
        InvalidEmail = 13,                  // email is invalid
        DuplicateName = 14,             // name is not unique
        AccessDenied = 15,                  // access is denied
        Timeout = 16,                       // operation timed out
        Banned = 17,                        // VAC2 banned
        AccountNotFound = 18,               // account not found
        InvalidSteamId = 19,                // steamID is invalid
        ServiceUnavailable = 20,            // The requested service is currently unavailable
        NotLoggedOn = 21,                   // The user is not logged on
        Pending = 22,                       // Request is pending (may be in process, or waiting on third party)
        EncryptionFailure = 23,         // Encryption or Decryption failed
        InsufficientPrivilege = 24,     // Insufficient privilege
        LimitExceeded = 25,             // Too much of a good thing
        Revoked = 26,                       // Access has been revoked (used for revoked guest passes)
        Expired = 27,                       // License/Guest pass the user is trying to access is expired
        AlreadyRedeemed = 28,               // Guest pass has already been redeemed by account, cannot be acked again
        DuplicateRequest = 29,              // The request is a duplicate and the action has already occurred in the past, ignored this time
        AlreadyOwned = 30,                  // All the games in this guest pass redemption request are already owned by the user
        IpNotFound = 31,                    // IP address not found
        PersistFailed = 32,             // failed to write change to the data store
        LockingFailed = 33,             // failed to acquire access lock for this operation
        LogonSessionReplaced = 34,
        ConnectFailed = 35,
        HandshakeFailed = 36,
        IoFailure = 37,
        RemoteDisconnect = 38,
        ShoppingCartNotFound = 39,          // failed to find the shopping cart requested
        Blocked = 40,                       // a user didn't allow it
        Ignored = 41,                       // target is ignoring sender
        NoMatch = 42,                       // nothing matching the request found
        AccountDisabled = 43,
        ServiceReadOnly = 44,               // this service is not accepting content changes right now
        AccountNotFeatured = 45,            // account doesn't have value, so this feature isn't available
        AdministratorOk = 46,               // allowed to take this action, but only because requester is admin
        ContentVersion = 47,                // A Version mismatch in content transmitted within the Steam protocol.
        TryAnotherCm = 48,                  // The current CM can't service the user making a request, user should try another.
        PasswordRequiredToKickSession = 49,// You are already logged in elsewhere, this cached credential login has failed.
        AlreadyLoggedInElsewhere = 50,      // You are already logged in elsewhere, you must wait
        Suspended = 51,                 // Long running operation (content download) suspended/paused
        Cancelled = 52,                 // Operation canceled (typically by user: content download)
        DataCorruption = 53,                // Operation canceled because data is ill formed or unrecoverable
        DiskFull = 54,                      // Operation canceled - not enough disk space.
        RemoteCallFailed = 55,              // an remote call or IPC call failed
        PasswordUnset = 56,             // Password could not be verified as it's unset server side
        ExternalAccountUnlinked = 57,       // External account (PSN, Facebook...) is not linked to a Steam account
        PsnTicketInvalid = 58,              // PSN ticket was invalid
        ExternalAccountAlreadyLinked = 59,  // External account (PSN, Facebook...) is already linked to some other account, must explicitly request to replace/delete the link first
        RemoteFileConflict = 60,            // The sync cannot resume due to a conflict between the local and remote files
        IllegalPassword = 61,               // The requested new password is not legal
        SameAsPreviousValue = 62,           // new value is the same as the old one ( secret question and answer )
        AccountLogonDenied = 63,            // account login denied due to 2nd factor authentication failure
        CannotUseOldPassword = 64,          // The requested new password is not legal
        InvalidLoginAuthCode = 65,          // account login denied due to auth code invalid
        AccountLogonDeniedNoMail = 66,      // account login denied due to 2nd factor auth failure - and no mail has been sent
        HardwareNotCapableOfIpt = 67,       //
        IptInitError = 68,                  //
        ParentalControlRestricted = 69, // operation failed due to parental control restrictions for current user
        FacebookQueryError = 70,            // Facebook query returned an error
        ExpiredLoginAuthCode = 71,          // account login denied due to auth code expired
        IpLoginRestrictionFailed = 72,
        AccountLockedDown = 73,
        AccountLogonDeniedVerifiedEmailRequired = 74,
        NoMatchingUrl = 75,
        BadResponse = 76,                   // parse failure, missing field, etc.
        RequirePasswordReEntry = 77,        // The user cannot complete the action until they re-enter their password
        ValueOutOfRange = 78,               // the value entered is outside the acceptable range
        UnexpectedError = 79,               // something happened that we didn't expect to ever happen
        Disabled = 80,                      // The requested service has been configured to be unavailable
        InvalidCegSubmission = 81,          // The set of files submitted to the CEG server are not valid !
        RestrictedDevice = 82,              // The device being used is not allowed to perform this action
        RegionLocked = 83,                  // The action could not be complete because it is region restricted
        RateLimitExceeded = 84,         // Temporary rate limit exceeded, try again later, different from EResultLimitExceeded which may be permanent
        AccountLoginDeniedNeedTwoFactor = 85,   // Need two-factor code to login
        ItemDeleted = 86,                   // The thing we're trying to access has been deleted
        AccountLoginDeniedThrottle = 87,    // login attempt failed, try to throttle response to possible attacker
        TwoFactorCodeMismatch = 88,     // two factor code mismatch
        TwoFactorActivationCodeMismatch = 89,   // activation code for two-factor didn't match
        AccountAssociatedToMultiplePartners = 90,   // account has been associated with multiple partners
        NotModified = 91,                   // data not modified
        NoMobileDevice = 92,                // the account does not have a mobile device associated with it
        TimeNotSynced = 93,             // the time presented is out of range or tolerance
        SmsCodeFailed = 94,             // SMS code failure (no match, none pending, etc.)
        AccountLimitExceeded = 95,          // Too many accounts access this resource
        AccountActivityLimitExceeded = 96,  // Too many changes to this account
        PhoneActivityLimitExceeded = 97,    // Too many changes to this phone
        RefundToWallet = 98,                // Cannot refund to payment method, must use wallet
        EmailSendFailure = 99,              // Cannot send an email
        NotSettled = 100,                   // Can't perform operation till payment has settled
        NeedCaptcha = 101,                  // Needs to provide a valid captcha
        GsltDenied = 102,                   // a game server login token owned by this token's owner has been banned
        GsOwnerDenied = 103,                // game server owner is denied for other reason (account lock, community ban, vac ban, missing phone)
        InvalidItemType = 104,              // the type of thing we were requested to act on is invalid
    }

    // Error codes for use with the voice functions
    public enum EVoiceResult
    {
        Ok = 0,
        NotInitialized = 1,
        NotRecording = 2,
        NoData = 3,
        BufferTooSmall = 4,
        DataCorrupted = 5,
        Restricted = 6,
        UnsupportedCodec = 7,
        ReceiverOutOfDate = 8,
        ReceiverDidNotAnswer = 9,

    }

    // ResultType codes to GSHandleClientDeny/Kick
    public enum EDenyReason
    {
        Invalid = 0,
        InvalidVersion = 1,
        Generic = 2,
        NotLoggedOn = 3,
        NoLicense = 4,
        Cheater = 5,
        LoggedInElseWhere = 6,
        UnknownText = 7,
        IncompatibleAnticheat = 8,
        MemoryCorruption = 9,
        IncompatibleSoftware = 10,
        SteamConnectionLost = 11,
        SteamConnectionError = 12,
        SteamResponseTimedOut = 13,
        SteamValidationStalled = 14,
        SteamOwnerLeftGuestUser = 15,
    }

    // results from BeginAuthSession
    public enum EBeginAuthSessionResult
    {
        Ok = 0,                     // Ticket is valid for this game and this steamID.
        InvalidTicket = 1,              // Ticket is not valid.
        DuplicateRequest = 2,           // A ticket has already been submitted for this steamID
        InvalidVersion = 3,         // Ticket is from an incompatible interface version
        GameMismatch = 4,               // Ticket is not for this game
        ExpiredTicket = 5,              // Ticket has expired
    }

    // Callback values for callback ValidateAuthTicketResponse which is a response to BeginAuthSession
    public enum EAuthSessionResponse
    {
        Ok = 0,                         // Steam has verified the user is online, the ticket is valid and ticket has not been reused.
        UserNotConnectedToSteam = 1,        // The user in question is not connected to steam
        NoLicenseOrExpired = 2,         // The license has expired.
        VacBanned = 3,                  // The user is VAC banned for this game.
        LoggedInElseWhere = 4,          // The user account has logged in elsewhere and the session containing the game instance has been disconnected.
        VacCheckTimedOut = 5,               // VAC has been unable to perform anti-cheat checks on this user
        AuthTicketCanceled = 6,         // The ticket has been canceled by the issuer
        AuthTicketInvalidAlreadyUsed = 7,   // This ticket has already been used, it is not valid.
        AuthTicketInvalid = 8,          // This ticket is not from a user instance currently connected to steam.
        PublisherIssuedBan = 9,         // The user is banned for this game. The ban came via the web api and not VAC
    }

    // results from UserHasLicenseForApp
    public enum EUserHasLicenseForAppResult
    {
        HasLicense = 0,                 // User has a license for specified app
        DoesNotHaveLicense = 1,         // User does not have a license for the specified app
        NoAuth = 2,                     // User has not been authenticated
    }

    // Steam account types
    public enum EAccountType
    {
        Invalid = 0,
        Individual = 1,     // single user account
        Multiseat = 2,      // multiseat (e.g. cybercafe) account
        GameServer = 3,     // game server account
        AnonGameServer = 4, // anonymous game server account
        Pending = 5,            // pending
        ContentServer = 6,  // content server
        Clan = 7,
        Chat = 8,
        ConsoleUser = 9,        // Fake SteamId for local PSN account on PS3 or Live account on 360, etc.
        AnonUser = 10,
        Max
    }

    //-----------------------------------------------------------------------------
    // Purpose:
    //-----------------------------------------------------------------------------
    public enum EAppReleaseState
    {
        Unknown = 0,    // unknown, required appinfo or license info is missing
        Unavailable = 1,    // even if user 'just' owns it, can see game at all
        Prerelease = 2, // can be purchased and is visible in games list, nothing else. Common appInfo section released
        PreloadOnly = 3,    // owners can preload app, not play it. AppInfo fully released.
        Released = 4,   // owners can download and play app.
    }

    //-----------------------------------------------------------------------------
    // Purpose:
    //-----------------------------------------------------------------------------
    [Flags]
    public enum EAppOwnershipFlags
    {
        None = 0x0000,  // unknown
        OwnsLicense = 0x0001,   // owns license for this game
        FreeLicense = 0x0002,   // not paid for game
        RegionRestricted = 0x0004,  // owns app, but not allowed to play in current region
        LowViolence = 0x0008,   // only low violence version
        InvalidPlatform = 0x0010,   // app not supported on current platform
        SharedLicense = 0x0020, // license was granted by authorized local device
        FreeWeekend = 0x0040,   // owned by a free weekend licenses
        RetailLicense = 0x0080, // has a retail license for game, (CD-Key etc)
        LicenseLocked = 0x0100, // shared license is locked (in use) by other user
        LicensePending = 0x0200,    // owns app, but transaction is still pending. Can't install or play
        LicenseExpired = 0x0400,    // doesn't own app anymore since license expired
        LicensePermanent = 0x0800,  // permanent license, not borrowed, or guest or freeweekend etc
        LicenseRecurring = 0x1000,  // Recurring license, user is charged periodically
        LicenseCanceled = 0x2000,   // Mark as canceled, but might be still active if recurring
        AutoGrant = 0x4000, // Ownership is based on any kind of autogrant license
        PendingGift = 0x8000,   // user has pending gift to redeem
        RentalNotActivated = 0x10000,   // Rental hasn't been activated yet
    }

    //-----------------------------------------------------------------------------
    // Purpose: designed as flags to allow filters masks
    //-----------------------------------------------------------------------------
    [Flags]
    public enum EAppType
    {
        Invalid = 0x000,    // unknown / invalid
        Game = 0x001,   // playable game, default type
        Application = 0x002,    // software application
        Tool = 0x004,   // SDKs, editors & dedicated servers
        Demo = 0x008,   // game demo
        MediaDeprecated = 0x010,    // legacy - was used for game trailers, which are now just videos on the web
        Dlc = 0x020,    // down loadable content
        Guide = 0x040,  // game guide, PDF etc
        Driver = 0x080, // hardware driver updater (ATI, Razor etc)
        Config = 0x100, // hidden app used to config Steam features (backpack, sales, etc)
        Hardware = 0x200,   // a hardware device (Steam Machine, Steam Controller, Steam Link, etc.)
        Video = 0x800,  // A video component of either a Film or TVSeries (may be the feature, an episode, preview, making-of, etc)
        Plugin = 0x1000,    // Plug-in types for other Apps
        Music = 0x2000, // Music files

        Shortcut = 0x40000000,  // just a shortcut, client side only
        DepotOnly = -2147483647,    // placeholder since depots and apps share the same namespace
    }

    //-----------------------------------------------------------------------------
    // types of user game stats fields
    // WARNING: DO NOT RENUMBER EXISTING VALUES - STORED IN DATABASE
    //-----------------------------------------------------------------------------
    public enum ESteamUserStatType
    {
        Invalid = 0,
        Int = 1,
        Float = 2,
        Avgrate = 3,
        Achievements = 4,
        Groupachievements = 5,
        Max
    }

    //-----------------------------------------------------------------------------
    // Purpose: Chat Entry Types (previously was only friend-to-friend message types)
    //-----------------------------------------------------------------------------
    public enum EChatEntryType
    {
        Invalid = 0,
        ChatMsg = 1,        // Normal text message from another user
        Typing = 2,         // Another user is typing (not used in multi-user chat)
        InviteGame = 3,     // Invite from other user into that users current game
        Emote = 4,          // text emote message (deprecated, should be treated as ChatMsg)
        LeftConversation = 6, // user has left the conversation ( closed chat window )
        Entered = 7,        // user has entered the conversation (used in multi-user chat and group chat)
        WasKicked = 8,      // user was kicked (data: 64-bit steamid of actor performing the kick)
        WasBanned = 9,      // user was banned (data: 64-bit steamid of actor performing the ban)
        Disconnected = 10,  // user disconnected
        HistoricalChat = 11,    // a chat message from user's chat history or offilne message
        Reserved1 = 12,
        Reserved2 = 13,
        LinkBlocked = 14, // a link was removed by the chat filter.
    }

    //-----------------------------------------------------------------------------
    // Purpose: Chat Room Enter Responses
    //-----------------------------------------------------------------------------
    public enum EChatRoomEnterResponse
    {
        Success = 1,        // Success
        DoesntExist = 2,    // Chat doesn't exist (probably closed)
        NotAllowed = 3,     // General Denied - You don't have the permissions needed to join the chat
        Full = 4,           // Chat room has reached its maximum size
        Error = 5,          // Unexpected Error
        Banned = 6,         // You are banned from this chat room and may not join
        Limited = 7,        // Joining this chat is not allowed because you are a limited user (no value on account)
        ClanDisabled = 8,   // Attempt to join a clan chat when the clan is locked or disabled
        CommunityBan = 9,   // Attempt to join a chat when the user has a community lock on their account
        MemberBlockedYou = 10, // Join failed - some member in the chat has blocked you from joining
        YouBlockedMember = 11, // Join failed - you have blocked some member already in the chat
    }

    // Special flags for Chat accounts - they go in the top 8 bits
    // of the steam ID's "instance", leaving 12 for the actual instances
    [Flags]
    public enum EChatSteamIdInstanceFlags
    {
        AccountInstanceMask = 0x00000FFF, // top 8 bits are flags
        Clan = (Constants.SteamAccountInstanceMask + 1) >> 1,   // top bit
        Lobby = (Constants.SteamAccountInstanceMask + 1) >> 2,  // next one down, etc
        MmsLobby = (Constants.SteamAccountInstanceMask + 1) >> 3,   // next one down, etc

        // Max of 8 flags
    }

    //-----------------------------------------------------------------------------
    // Purpose: Marketing message flags that change how a client should handle them
    //-----------------------------------------------------------------------------
    [Flags]
    public enum EMarketingMessageFlags
    {
        None = 0,
        HighPriority = 1 << 0,
        PlatformWindows = 1 << 1,
        PlatformMac = 1 << 2,
        PlatformLinux = 1 << 3,

        //aggregate flags
        PlatformRestrictions =
        PlatformWindows |
        PlatformMac |
        PlatformLinux,
    }

    //-----------------------------------------------------------------------------
    // Purpose: Possible positions to tell the overlay to show notifications in
    //-----------------------------------------------------------------------------
    public enum ENotificationPosition
    {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3,
    }

    //-----------------------------------------------------------------------------
    // Purpose: Broadcast upload result details
    //-----------------------------------------------------------------------------
    public enum EBroadcastUploadResult
    {
        None = 0,   // broadcast state unknown
        Ok = 1,     // broadcast was good, no problems
        InitFailed = 2, // broadcast init failed
        FrameFailed = 3,    // broadcast frame upload failed
        Timeout = 4,    // broadcast upload timed out
        BandwidthExceeded = 5,  // broadcast send too much data
        LowFps = 6, // broadcast FPS too low
        MissingKeyFrames = 7,   // broadcast sending not enough key frames
        NoConnection = 8,   // broadcast client failed to connect to relay
        RelayFailed = 9,    // relay dropped the upload
        SettingsChanged = 10,   // the client changed broadcast settings
        MissingAudio = 11,  // client failed to send audio data
        TooFarBehind = 12,  // clients was too slow uploading
        TranscodeBehind = 13,   // server failed to keep up with transcode
    }

    //-----------------------------------------------------------------------------
    // Purpose: codes for well defined launch options
    //-----------------------------------------------------------------------------
    public enum ELaunchOptionType
    {
        None = 0,   // unknown what launch option does
        Default = 1,    // runs the game, app, whatever in default mode
        SafeMode = 2,   // runs the game in safe mode
        Multiplayer = 3,    // runs the game in multiplayer mode
        Config = 4, // runs config tool for this game
        OpenVr = 5, // runs game in VR mode using OpenVR
        Server = 6, // runs dedicated server for this game
        Editor = 7, // runs game editor
        Manual = 8, // shows game manual
        Benchmark = 9,  // runs game benchmark
        Option1 = 10,   // generic run option, uses description field for game name
        Option2 = 11,   // generic run option, uses description field for game name
        Option3 = 12,   // generic run option, uses description field for game name
        OtherVr = 13,   // runs game in VR mode using the Oculus SDK or other vendor-specific VR SDK
        OpenVrOverlay = 14, // runs an OpenVR dashboard overlay


        Dialog = 1000, // show launch options dialog
    }

    // HTTP related types
    // This enum is used in client API methods, do not re-number existing values.
    public enum EhttpMethod
    {
        Invalid = 0,
        Get,
        Head,
        Post,
        Put,
        Delete,
        Options,

        // The remaining HTTP methods are not yet supported, per rfc2616 section 5.1.1 only GET and HEAD are required for
        // a compliant general purpose server.  We'll likely add more as we find uses for them.

        // EHTTPMethodTRACE,
        // EHTTPMethodCONNECT
    }

    // HTTP Status codes that the server can send in response to a request, see rfc2616 section 10.3 for descriptions
    // of each of these.
    public enum EhttpStatusCode
    {
        // Invalid status code (this isn't defined in HTTP, used to indicate unset in our code)
        Invalid = 0,

        // Informational codes
        Continue = 100,
        SwitchingProtocols = 101,

        // Success codes
        Ok = 200,
        Created = 201,
        Accepted = 202,
        NonAuthoritative = 203,
        NoContent = 204,
        ResetContent = 205,
        PartialContent = 206,

        // Redirection codes
        MultipleChoices = 300,
        MovedPermanently = 301,
        Found = 302,
        SeeOther = 303,
        NotModified = 304,
        UseProxy = 305,
        TemporaryRedirect = 307,

        // Error codes
        BadRequest = 400,
        Unauthorized = 401, // You probably want 403 or something else. 401 implies you're sending a WWW-Authenticate header and the client can sent an Authorization header in response.
        PaymentRequired = 402, // This is reserved for future HTTP specs, not really supported by clients
        Forbidden = 403,
        NotFound = 404,
        MethodNotAllowed = 405,
        NotAcceptable = 406,
        ProxyAuthRequired = 407,
        RequestTimeout = 408,
        Conflict = 409,
        Gone = 410,
        LengthRequired = 411,
        PreconditionFailed = 412,
        RequestEntityTooLarge = 413,
        RequestUriTooLong = 414,
        UnsupportedMediaType = 415,
        RequestedRangeNotSatisfiable = 416,
        ExpectationFailed = 417,
        Unknown = 418, // 418 is reserved, so we'll use it to mean unknown
        TooManyRequests = 429,

        // Server error codes
        InternalServerError = 500,
        NotImplemented = 501,
        BadGateway = 502,
        ServiceUnavailable = 503,
        GatewayTimeout = 504,
        HttpVersionNotSupported = 505,
    }

    // Steam universes.  Each universe is a self-contained Steam instance.
    public enum EUniverse
    {
        Invalid = 0,
        Public = 1,
        Beta = 2,
        Internal = 3,
        Dev = 4,
        Max
    }

}
