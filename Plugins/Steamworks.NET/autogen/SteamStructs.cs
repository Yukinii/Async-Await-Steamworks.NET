// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2015 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

using System;
using System.Runtime.InteropServices;

namespace Steamworks {
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct ControllerAnalogActionData {
		// Type of data coming from this action, this will match what got specified in the action set
		public readonly EControllerSourceMode Mode;
		
		// The current state of this action; will be delta updates for mouse actions
		public readonly float x;
	    public readonly float y;

	    // Whether or not this action is currently available to be bound in the active action set
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool Active;
	}

	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct ControllerDigitalActionData {
		// The current state of this action; will be true if currently pressed
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool State;
		
		// Whether or not this action is currently available to be bound in the active action set
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool Active;
	}

	// friend game played information
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct FriendGameInfo {
		public GameId _gameId;
		public readonly uint GameIP;
		public readonly ushort GamePort;
		public readonly ushort QueryPort;
		public SteamId _steamIDLobby;
	}

	//-----------------------------------------------------------------------------
	// Purpose: information about user sessions
	//-----------------------------------------------------------------------------
	public struct FriendSessionStateInfo {
		public uint OnlineSessionInstances;
		public byte PublishedToFriendsSessionInstance;
	}

	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct SteamItemDetails {
		public SteamItemInstanceId _itemId;
		public SteamItemDef _iDefinition;
		public readonly ushort Quantity;
		public readonly ushort Flags; // see ESteamItemFlags
	}

	// connection state to a specified user, returned by GetP2PSessionState()
	// this is under-the-hood info about what's going on with a SendP2PPacket(), shouldn't be needed except for debuggin
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct P2PSessionState {
		public readonly byte ConnectionActive;		// true if we've got an active open connection
		public readonly byte Connecting;			// true if we're currently trying to establish a connection
		public readonly byte P2PSessionError;		// last error recorded (see enum above)
		public readonly byte UsingRelay;			// true if it's going through a relay server (TURN)
		public readonly int BytesQueuedForSend;
		public readonly int PacketsQueuedForSend;
		public readonly uint RemoteIP;				// potential IP:Port of remote host. Could be TURN server.
		public readonly ushort RemotePort;			// Only exists for compatibility with older authentication api's
	}

	//-----------------------------------------------------------------------------
	// Purpose: Structure that contains an array of const char * strings and the number of those strings
	//-----------------------------------------------------------------------------
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct SteamParamStringArray {
		public IntPtr _ppStrings;
		public int NumStrings;
	}

	// Details for a single published file/UGC
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct SteamUGCDetails {
		public PublishedFileId Field;
		public readonly ResultType ResultType;						
		public readonly WorkshopFileType FileType;					
		public AppId CreatorAppID;									
		public AppId ConsumerAppID;									       
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = Constants.PublishedDocumentTitleMax)]
		public readonly string Title;				
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = Constants.PublishedDocumentDescriptionMax)]
		public readonly string Description;	
		public readonly ulong SteamIDOwner;	
		public readonly uint TimeCreated;	
		public readonly uint TimeUpdated;	      
		public readonly uint TimeAddedToUserList;	
		public readonly Visibility Visibility;		
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool Banned;				
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool AcceptedForUse;		
		[MarshalAs(UnmanagedType.I1)]
		public readonly bool TagsTruncated;			
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = Constants.TagListMax)]
		public readonly string Tags;								// comma separated list of all tags associated with this file
		// file/url information
		public UGCHandle _hFile;											// The handle of the primary file
		public UGCHandle _hPreviewFile;										// The handle of the preview file
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = Constants.FilenameMax)]
		public readonly string FileName;							// The cloud filename of the primary file
		public readonly int FileSize;												// Size of the primary file
		public readonly int PreviewFileSize;										// Size of the preview file
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = Constants.PublishedFileURLMax)]
		public readonly string URL;						// URL (for a video or a website)
		// voting information
		public readonly uint VotesUp;												// number of votes up
		public readonly uint VotesDown;											// number of votes down
		public readonly float Score;												// calculated score
		// collection details
		public readonly uint NumChildren;
	}

	// structure that contains client callback data
	// see callbacks documentation for more details
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct CallbackMsg {
		public readonly int SteamUser;
		public readonly int Callback;
		public IntPtr ParamPtr;
		public readonly int Param;
	}

	// a single entry in a leaderboard, as returned by GetDownloadedLeaderboardEntry()
	[StructLayout(LayoutKind.Sequential, Pack = Packsize.Value)]
	public struct LeaderboardEntry {
		public SteamId _userId; // user with the entry - use SteamFriends()->GetFriendPersonaName() & SteamFriends()->GetFriendAvatar() to get more info
		public readonly int GlobalRank;	// [1..N], where N is the number of users with an entry in the leaderboard
		public readonly int Score;			// score as set in the leaderboard
		public readonly int Details;		// number of int32 details available for this entry
		public UGCHandle _hUGC;		// handle for UGC attached to the entry
	}

	/// Store key/value pair used in matchmaking queries.
	///
	/// Actually, the name Key/Value is a bit misleading.  The "key" is better
	/// understood as "filter operation code" and the "value" is the operand to this
	/// filter operation.  The meaning of the operand depends upon the filter.
	[StructLayout(LayoutKind.Sequential)]
	public struct MatchMakingKeyValuePair {
	    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		public readonly string _szKey;
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		public readonly string _szValue;
	}

}
