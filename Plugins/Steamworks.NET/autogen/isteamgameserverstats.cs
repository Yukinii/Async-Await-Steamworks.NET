// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2015 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

namespace Steamworks {
	public static class SteamGameServerStats {
		/// <summary>
		/// <para> downloads stats for the user</para>
		/// <para> returns a GSStatsReceived callback when completed</para>
		/// <para> if the user has no stats, GSStatsReceived.ResultType will be set to EResultFail</para>
		/// <para> these stats will only be auto-updated for clients playing on the server. For other</para>
		/// <para> users you'll need to call RequestUserStats() again to refresh any data</para>
		/// </summary>
		public static SteamAPICall RequestUserStats(SteamId userId) {
			InteropHelp.TestIfAvailableGameServer();
			return (SteamAPICall)NativeMethods.ISteamGameServerStats_RequestUserStats(userId);
		}

		/// <summary>
		/// <para> requests stat information for a user, usable after a successful call to RequestUserStats()</para>
		/// </summary>
		public static bool GetUserStat(SteamId userId, string name, out int data) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_GetUserStat(userId, name2, out data);
			}
		}

		public static bool GetUserStat(SteamId userId, string name, out float data) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_GetUserStat_(userId, name2, out data);
			}
		}

		public static bool GetUserAchievement(SteamId userId, string name, out bool achieved) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_GetUserAchievement(userId, name2, out achieved);
			}
		}

		/// <summary>
		/// <para> Set / update stats and achievements.</para>
		/// <para> Note: These updates will work only on stats game servers are allowed to edit and only for</para>
		/// <para> game servers that have been declared as officially controlled by the game creators.</para>
		/// <para> Set the IP range of your official servers on the Steamworks page</para>
		/// </summary>
		public static bool SetUserStat(SteamId userId, string name, int nData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_SetUserStat(userId, name2, nData);
			}
		}

		public static bool SetUserStat(SteamId userId, string name, float fData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_SetUserStat_(userId, name2, fData);
			}
		}

		public static bool UpdateUserAvgRateStat(SteamId userId, string name, float flCountThisSession, double dSessionLength) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_UpdateUserAvgRateStat(userId, name2, flCountThisSession, dSessionLength);
			}
		}

		public static bool SetUserAchievement(SteamId userId, string name) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_SetUserAchievement(userId, name2);
			}
		}

		public static bool ClearUserAchievement(SteamId userId, string name) {
			InteropHelp.TestIfAvailableGameServer();
			using (var name2 = new InteropHelp.UTF8StringHandle(name)) {
				return NativeMethods.ISteamGameServerStats_ClearUserAchievement(userId, name2);
			}
		}

		/// <summary>
		/// <para> Store the current data on the server, will get a GSStatsStored callback when set.</para>
		/// <para> If the callback has a result of EResultInvalidParam, one or more stats</para>
		/// <para> uploaded has been rejected, either because they broke constraints</para>
		/// <para> or were out of date. In this case the server sends back updated values.</para>
		/// <para> The stats should be re-iterated to keep in sync.</para>
		/// </summary>
		public static SteamAPICall StoreUserStats(SteamId userId) {
			InteropHelp.TestIfAvailableGameServer();
			return (SteamAPICall)NativeMethods.ISteamGameServerStats_StoreUserStats(userId);
		}
	}
}